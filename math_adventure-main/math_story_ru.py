import os
import json
import requests
import streamlit as st
from datetime import datetime
from dotenv import load_dotenv
from PIL import Image
import base64
import io

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()
API_URL = os.getenv("API_URL")
API_KEY = os.getenv("API_KEY")
MODEL = "deepseek/deepseek-r1:free"
HEADERS = {"Authorization": f"Bearer {API_KEY}", "Content-Type": "application/json"}
RESULTS_FILE = "ege_results.json"
LEVELS_FILE = "ege_levels.json"
USERS_FILE = "users.json"

# === –¢–µ–º—ã –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞–Ω–∏–π ===
TASK_THEMES = {
    1: "–ü—Ä–æ—Å—Ç–µ–π—à–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (–ø—Ä–æ—Ü–µ–Ω—Ç—ã, –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ)",
    2: "–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è (–≤—Ä–µ–º—è, –¥–ª–∏–Ω–∞, –º–∞—Å—Å–∞, –æ–±—ä—ë–º, –ø–ª–æ—â–∞–¥—å)",
    3: "–ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã",
    4: "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º—É–ª—ã",
    5: "–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π",
    6: "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä (–∫–æ–º–ø–ª–µ–∫—Ç—ã, –≤–∞—Ä–∏–∞–Ω—Ç—ã)",
    7: "–ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π",
    8: "–ê–Ω–∞–ª–∏–∑ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π",
    9: "–ó–∞–¥–∞—á–∏ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Ä–µ—à–µ—Ç–∫–µ (–∫–∞—Ä—Ç–∞, —Ñ–∏–≥—É—Ä—ã)",
    10: "–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è (—Ñ–∏–≥—É—Ä—ã –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏)",
    11: "–°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è: –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–∏, —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —Ç–µ–ª–∞",
    12: "–ü–ª–∞–Ω–∏–º–µ—Ç—Ä–∏—è: —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏, —á–µ—Ç—ã—Ä—ë—Ö—É–≥–æ–ª—å–Ω–∏–∫–∏, –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å",
    13: "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã: –ø–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥, –ø—Ä–∏–∑–º–∞, —Ü–∏–ª–∏–Ω–¥—Ä",
    14: "–í—ã—á–∏—Å–ª–µ–Ω–∏—è —Å –¥—Ä–æ–±—è–º–∏ –∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏",
    15: "–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö",
    16: "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏–π: —Å—Ç–µ–ø–µ–Ω–∏, –ª–æ–≥–∞—Ä–∏—Ñ–º—ã, —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è",
    17: "–£—Ä–∞–≤–Ω–µ–Ω–∏—è: –ª–∏–Ω–µ–π–Ω—ã–µ, –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ, –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ",
    18: "–ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –∏ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏",
    19: "–ß–∏—Å–ª–∞ –∏ –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞ (—Ü–∏—Ñ—Ä–æ–≤–∞—è –∑–∞–ø–∏—Å—å)",
    20: "–°–ª–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏: –¥–≤–∏–∂–µ–Ω–∏–µ, —Å–º–µ—Å–∏, —Ä–∞–±–æ—Ç–∞",
    21: "–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–º–µ–∫–∞–ª–∫—É"
}
# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===  # === –í–∞—à–∏ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ ===
def load_users():
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            st.error("–§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.")
            return {}
    return {}

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===  # === –í–∞—à–∏ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ ===
def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===  # === –í–∞—à–∏ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ ===
def register_user(username, password):
    users = load_users()
    if username in users:
        return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    users[username] = {
        "password": password,
        "levels": {"full": 1, "tasks": {}},  # –£—Ä–æ–≤–Ω–∏ –ø–æ –∑–∞–¥–∞—á–∞–º
        "results": []  # –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    }
    save_users(users)
    return True

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===  # === –í–∞—à–∏ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ ===
def authenticate_user(username, password):
    users = load_users()
    if username in users and users[username]["password"] == password:
        return users[username]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return None

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π ===
def load_levels():
    if os.path.exists(LEVELS_FILE):
        with open(LEVELS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"full": 1, "tasks": {}}

def save_levels(levels):
    with open(LEVELS_FILE, "w", encoding="utf-8") as f:
        json.dump(levels, f, ensure_ascii=False, indent=2)

levels = load_levels()

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ ===
def build_prompt(mode, task_number=None, count=21, theme=None, level=1):
    level_clause = {1: "–ª–µ–≥–∫–æ–≥–æ", 2: "—Å—Ä–µ–¥–Ω–µ–≥–æ", 3: "—Å–ª–æ–∂–Ω–æ–≥–æ"}.get(level, "–ª–µ–≥–∫–æ–≥–æ")
    theme_clause = f' –í—Å–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É "{theme}".' if theme else ""
    if mode == "full":
        return f"""
–¢—ã ‚Äî –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {count} —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á {level_clause} —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ (–±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å), –∫–∞–∂–¥–∞—è –∏–∑ —Å–≤–æ–µ–π —Ç–µ–º—ã.
{theme_clause}
–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
[
  {{"question": "...", "answer": "...", "explanation": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"}}
]
–ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –≤–Ω–µ JSON!
""".strip()
    elif mode == "single":
        description = TASK_THEMES.get(task_number, "")
        return f"""
–¢—ã ‚Äî –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {count} –∑–∞–¥–∞—á —Ç–∏–ø–∞ ‚Ññ{task_number} ({description}) {level_clause} —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ï–ì–≠.
{theme_clause}
–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
[
  {{"question": "...", "answer": "...", "explanation": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"}}
]
–ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –≤–Ω–µ JSON!
""".strip()

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ API ===
def generate_questions(prompt):
    import re
    payload = {"model": MODEL, "messages": [{"role": "user", "content": prompt}]}
    try:
        response = requests.post(API_URL, headers=HEADERS, json=payload)
        response.raise_for_status()
        result = response.json()
        content = result["choices"][0]["message"]["content"].strip()
        if content.startswith("```"):
            content = re.sub(r"^```(?:json)?", "", content)
            content = re.sub(r"```$", "", content).strip()
        start = content.find("[")
        end = content.rfind("]") + 1
        return json.loads(content[start:end])
    except Exception as e:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞.")
        return []

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ 3 –∑–∞–ø—Ä–æ—Å–∞ –ø–æ 7 –∑–∞–¥–∞–Ω–∏–π ===
def generate_full_exam(theme,  levels):
    prompts = [
        build_prompt("full", count=7, theme=theme),
        build_prompt("full", count=7, theme=theme),
        build_prompt("full", count=7, theme=theme),
    ]
    results = []
    for prompt in prompts:
        part = generate_questions(prompt)
        if isinstance(part, list):
            results.extend(part)
        else:
            st.error("‚ùå –û–¥–Ω–∞ –∏–∑ —á–∞—Å—Ç–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å.")
            return []
    return results

users = load_users()
# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ===
def save_result(username, mode, task_number, total, correct):
    users = load_users()  # –ó–∞–≥—Ä—É–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_data = users.get(username, {})
    
    entry = {
        "datetime": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "mode": mode,
        "task_number": task_number,
        "total": total,
        "correct": correct,
        "percent": round(correct / total * 100, 1) if total else 0,
        "level": user_data["levels"]["full"] if mode == "full" else user_data["levels"]["tasks"].get(str(task_number), 1)
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    user_results_file = f"results_{username}.json"
    if os.path.exists(user_results_file):
        with open(user_results_file, "r", encoding="utf-8") as f:
            all_results = json.load(f)
    else:
        all_results = []

    all_results.append(entry)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
    with open(user_results_file, "w", encoding="utf-8") as f:
        json.dump(all_results, f, ensure_ascii=False, indent=2)

    # –õ–æ–≥–∏–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    if mode == "full":
        if correct / total >= 0.8 and user_data['levels']['full'] < 3:
            user_data['levels']['full'] += 1
            st.success("üéâ –í–∞—à —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—ã—à–µ–Ω –¥–æ " + str(user_data['levels']['full']))
    elif mode == "single":
        tn = str(task_number)
        if correct / total >= 0.8:
            current_task_level = user_data['levels']['tasks'].get(tn, 1)
            if current_task_level < 3:
                user_data['levels']['tasks'][tn] = current_task_level + 1
                st.success(f"üéâ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ‚Ññ{task_number} –ø–æ–≤—ã—à–µ–Ω –¥–æ {user_data['levels']['tasks'][tn]}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_users(users)

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ===
st.set_page_config("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠", page_icon="üìò")

right_img = Image.open("right.png")
buffered = io.BytesIO()
right_img.save(buffered, format="PNG")
img_base64 = base64.b64encode(buffered.getvalue()).decode()

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ —Ü–µ–Ω—Ç—Ä—É
st.markdown(
    f"""
    <div style='text-align: center;'>
        <img src="data:image/png;base64,{img_base64}" style="max-width: 500px;" />
    </div>
    """,
    unsafe_allow_html=True
)

# === –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ===
st.sidebar.header("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
auth_option = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", ["–í–æ–π—Ç–∏", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
username = st.sidebar.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
password = st.sidebar.text_input("–ü–∞—Ä–æ–ª—å", type="password")

if auth_option == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
    if st.sidebar.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
        if register_user(username, password):
            st.sidebar.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")
        else:
            st.sidebar.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
else:
    if st.sidebar.button("–í–æ–π—Ç–∏"):
        if authenticate_user(username, password):
            st.session_state['username'] = username  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.sidebar.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
        else:
            st.sidebar.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = None
if 'username' not in st.session_state:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.")
else:
    username = st.session_state['username']
    user_data = load_users().get(username)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.success("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ " + username)
    # –ü—Ä–æ–±–µ–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    mode = st.radio("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", ["–ü—Ä–æ–π—Ç–∏ –≤–µ—Å—å –≤–∞—Ä–∏–∞–Ω—Ç (21 –∑–∞–¥–∞–Ω–∏–µ)", "–†–µ—à–∏—Ç—å –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏"])
    
    theme = st.text_input("–¢–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ—Å–º–æ—Å)")
    questions = []
    score = 0
    
    if mode == "–ü—Ä–æ–π—Ç–∏ –≤–µ—Å—å –≤–∞—Ä–∏–∞–Ω—Ç (21 –∑–∞–¥–∞–Ω–∏–µ)":
        st.markdown(f"**–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:** {user_data['levels']['full']}")
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç"):
            questions = generate_full_exam(theme, user_data['levels']['full'])
            st.session_state.questions = questions
            st.session_state.mode = "full"
            st.session_state.task_number = None
    else:
        task_number = st.selectbox("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è (1‚Äì21):", list(range(1, 22)))
        current_task_level = user_data['levels']['tasks'].get(str(task_number), 1)
        st.markdown(f"**–í–∞—à —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ‚Ññ{task_number}:** {current_task_level}")
        count = st.slider("–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?", 1, 10, 5)
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è"):
            prompt = build_prompt("single", task_number=task_number, count=count, theme=theme, level=current_task_level)
            questions = generate_questions(prompt)
            st.session_state.questions = questions
            st.session_state.mode = "single"
            st.session_state.task_number = task_number

    if "questions" in st.session_state:
        st.markdown("### –ó–∞–¥–∞–Ω–∏—è:")
        submitted = st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã")
        correct = 0
        total = len(st.session_state.questions)

        for i, q in enumerate(st.session_state.questions):
            st.markdown(f"**–í–æ–ø—Ä–æ—Å {i+1}:** {q['question']}")
            user_key = f"user_answer_{i}"
            user_input = st.text_input("–í–∞—à –æ—Ç–≤–µ—Ç:", key=user_key)

            if submitted:
                is_correct = str(user_input).strip() == str(q["answer"]).strip()
                if is_correct:
                    st.success(f"‚úÖ –í–µ—Ä–Ω–æ! –í–∞—à –æ—Ç–≤–µ—Ç: {user_input}")
                    correct += 1
                else:
                    st.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –í–∞—à –æ—Ç–≤–µ—Ç: {user_input} | –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['answer']}")
                if q.get("explanation"):
                    st.info(f"üß† –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {q['explanation']}")

        if submitted:
            percent = correct / total * 100
            st.markdown("---")
            st.info(f"üéØ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: **{correct} –∏–∑ {total}** ({percent:.1f}%)")

            if st.session_state.mode == "full":
                if percent >= 80 and user_data['levels']['full'] < 3:
                    user_data['levels']['full'] += 1
            elif st.session_state.mode == "single":
                tn = str(st.session_state.task_number)
                if percent >= 80:
                    user_data['levels']['tasks'][tn] = min(3, user_data['levels']['tasks'].get(tn, 1) + 1)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
            save_users(users)  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è users –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –¥–æ —ç—Ç–æ–≥–æ
            save_result(username, st.session_state.mode, st.session_state.task_number, total, correct)
            st.balloons()

    # === –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
    user_results_file = f"results_{username}.json"
    if os.path.exists(user_results_file):
        current_mode = st.session_state.get("mode")
        current_task = st.session_state.get("task_number")
        filtered_results = []

        with open(user_results_file, "r", encoding="utf-8") as f:
            all_results = json.load(f)
            if current_mode == "full":
                filtered_results = [r for r in all_results if r["mode"] == "full"]
            elif current_mode == "single" and current_task is not None:
                filtered_results = [r for r in all_results if r["mode"] == "single" and r["task_number"] == current_task]

        if filtered_results:
            with st.expander("üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"):
                for entry in reversed(filtered_results[-10:]):
                    task_info = f" ‚Ññ{entry['task_number']}" if entry['task_number'] else ""
                    st.markdown(
                        f"- {entry['datetime']} | {entry['mode']}{task_info} | "
                        f"{entry['correct']}/{entry['total']} ({entry['percent']}%) | –£—Ä–æ–≤–µ–Ω—å {entry['level']}")